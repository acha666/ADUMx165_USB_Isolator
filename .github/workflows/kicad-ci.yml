name: KiCad PCB CI

on: 
  push:
    branches:
      - main

env:
  PROJECT_NAME: ADUMx165_USB_Isolator

jobs:
  drc-check:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.drc-results.outputs.proceed }}
    container:
      image: kicad/kicad:8.0
      options: --user root

    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq protobuf-compiler

      - name: Checkout Repository
        uses: actions/checkout@master
      
      - name: Set Short SHA
        id: short-sha
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Replace Library Tables
        run: |
          rm ./fp-lib-table ./sym-lib-table
          cp .github/workflows/kicad-conf/gh-fp-lib-table ./fp-lib-table
          cp .github/workflows/kicad-conf/gh-sym-lib-table ./sym-lib-table

      - name: Create Output Directories
        run: mkdir -p outputs/drc

      - name: Run DRC and Capture Output
        id: drc
        shell: bash
        run: |
          for severity in "all" "error" "warning" "exclusions"; do
            echo "::group::Running DRC with severity $severity"
            OUTPUT=$(kicad-cli pcb drc -o "outputs/drc/${{ env.PROJECT_NAME }}-drc-report-${severity}.json" \
                                       --format json --schematic-parity --severity-${severity} \
                                       -D BRANCH=${GITHUB_REF#refs/heads/} \
                                       -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                       -D LONG_SHA=$GITHUB_SHA \
                                       -D IS_CI=1 \
                                       ./${{ env.PROJECT_NAME }}.kicad_pcb)
            echo "$OUTPUT"
            echo "::endgroup::"
            SINGLE_LINE_OUTPUT=$(echo "$OUTPUT" | tr '\n' ',')
            echo "DRC_OUTPUT_${severity^^}=$SINGLE_LINE_OUTPUT" >> $GITHUB_OUTPUT
          done

      - name: Analyze DRC Results and Decide Next Steps
        id: drc-results
        run: |
          output="${{ steps.drc.outputs.DRC_OUTPUT_ERROR }}"
          violations=$(echo $output | grep -oP 'Found \K[0-9]+(?= violations)')
          unconnected_items=$(echo $output | grep -oP 'Found \K[0-9]+(?= unconnected items)')
          schematic_issues=$(echo "$output" | grep -oP 'Found \K[0-9]+(?= schematic parity issues)')
          echo "::info ::Violations: $violations"
          echo "::info ::Unconnected Items: $unconnected_items"
          echo "::info ::Schematic Parity Issues: $schematic_issues"
          if [ "$violations" -ne 0 ] || [ "$unconnected_items" -ne 0 ] || [ "$schematic_issues" -ne 0 ]; then
            echo "PROCEED=false" >> $GITHUB_OUTPUT
            echo "::error ::Errors found in the DRC report, please check the report for more details."
          else
            echo "PROCEED=true" >> $GITHUB_OUTPUT
            echo "::info ::No errors found in the DRC report."
          fi

      - name: Parse DRC Report and Create Warnings
        run: |
          jq -c '.violations[]' "outputs/drc/${{ env.PROJECT_NAME }}-drc-report-all.json" | while read -r violation; do
            description=$(echo $violation | jq -r '.description')
            # items=$(echo $violation | jq -r '.items[] | .description')
            # echo "::notice ::$description - $items"
            echo "::notice ::$description"
          done

      - name: Upload DRC Reports
        uses: actions/upload-artifact@master
        with:
          name: drc-reports-${{ steps.short-sha.outputs.SHORT_SHA }}
          path: ./outputs/drc

  export-files:
    needs: drc-check
    permissions:
      contents: write
      packages: write
    if: needs.drc-check.outputs.PROCEED == 'true'
    runs-on: ubuntu-latest
    container:
      image: kicad/kicad:8.0
      options: --user root

    steps:
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler inkscape imagemagick

      - name: Checkout Repository
        uses: actions/checkout@master

      - name: Set Short SHA
        id: short-sha
        run: |
          echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
          echo "LONG_SHA=$GITHUB_SHA" >> $GITHUB_OUTPUT

      - name: Set Timezone to Asia/Shanghai
        run: |
          sudo ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          sudo echo "Asia/Shanghai" > /etc/timezone

      - name: Replace Library Tables
        run: |
          rm ./fp-lib-table ./sym-lib-table
          cp .github/workflows/kicad-conf/gh-fp-lib-table ./fp-lib-table
          cp .github/workflows/kicad-conf/gh-sym-lib-table ./sym-lib-table          

      - name: Export Files (Gerber, Drill, Position, STEP, VRML, Netlist)
        shell: bash
        run: |
          mkdir -p outputs/{gerber,pnp,step,vrml,bom,netlist,schematic,svg,bom,png}

          kicad-cli pcb export gerbers -o "outputs/gerber/" --board-plot-params \
                                       -D BRANCH=${GITHUB_REF#refs/heads/} \
                                       -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                       -D LONG_SHA=$GITHUB_SHA \
                                       -D IS_CI=1 ./${{ env.PROJECT_NAME }}.kicad_pcb

          kicad-cli pcb export drill -o "outputs/gerber/" --format gerber --generate-map ./${{ env.PROJECT_NAME }}.kicad_pcb
          
          kicad-cli pcb export pos -o "outputs/pnp/${{ env.PROJECT_NAME }}-top-pos.csv" \
                                   --side front \
                                   --format csv \
                                   --units mm \
                                   --exclude-dnp \
                                   ./${{ env.PROJECT_NAME }}.kicad_pcb
          
          kicad-cli pcb export pos -o "outputs/pnp/${{ env.PROJECT_NAME }}-bottom-pos.csv" \
                                   --side back \
                                   --format csv \
                                   --units mm \
                                   --exclude-dnp \
                                   ./${{ env.PROJECT_NAME }}.kicad_pcb
          
          kicad-cli pcb export step -o "outputs/step/${{ env.PROJECT_NAME }}.step" --no-dnp --subst-models --include-tracks --include-zones \
                                    -D BRANCH=${GITHUB_REF#refs/heads/} \
                                    -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                    -D LONG_SHA=$GITHUB_SHA \
                                    -D IS_CI=1 \
                                    ./${{ env.PROJECT_NAME }}.kicad_pcb

          kicad-cli pcb export vrml -o "outputs/vrml/${{ env.PROJECT_NAME }}.wrl" \
                                    --units mm \
                                    --models-dir "${{ env.PROJECT_NAME }}.wrl.modules" \
                                    --models-relative \
                                    -D BRANCH=${GITHUB_REF#refs/heads/} \
                                    -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                    -D LONG_SHA=$GITHUB_SHA \
                                    -D IS_CI=1 \
                                    ./${{ env.PROJECT_NAME }}.kicad_pcb
          
          for layer in "F.Silkscreen" "F.Paste" "F.Mask" "F.Fab" "F.Cu"; do
              kicad-cli pcb export svg -o "outputs/svg/${{ env.PROJECT_NAME }}-${layer}.svg" \
                                      --page-size-mode 2 \
                                      --layers "$layer" \
                                      -D BRANCH=${GITHUB_REF#refs/heads/} \
                                      -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                      -D LONG_SHA=$GITHUB_SHA \
                                      -D IS_CI=1 \
                                      ./${{ env.PROJECT_NAME }}.kicad_pcb
          done

          for layer in "B.Silkscreen" "B.Paste" "B.Mask" "B.Fab" "B.Cu"; do
              kicad-cli pcb export svg -o "outputs/svg/${{ env.PROJECT_NAME }}-${layer}.svg" \
                                      --page-size-mode 2 \
                                      --mirror \
                                      --layers "$layer" \
                                      -D BRANCH=${GITHUB_REF#refs/heads/} \
                                      -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                      -D LONG_SHA=$GITHUB_SHA \
                                      -D IS_CI=1 \
                                      ./${{ env.PROJECT_NAME }}.kicad_pcb
          done

          kicad-cli pcb export svg -o "outputs/svg/${{ env.PROJECT_NAME }}-Edge.Cuts.svg" \
                                  --page-size-mode 2 \
                                  --layers "Edge.Cuts" \
                                  -D BRANCH=${GITHUB_REF#refs/heads/} \
                                  -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                  -D LONG_SHA=$GITHUB_SHA \
                                  -D IS_CI=1 \
                                  ./${{ env.PROJECT_NAME }}.kicad_pcb

          kicad-cli pcb export svg -o "outputs/svg/${{ env.PROJECT_NAME }}-Edge.Cuts-mirrored.svg" \
                                  --page-size-mode 2 \
                                  --mirror \
                                  --layers "Edge.Cuts" \
                                  -D BRANCH=${GITHUB_REF#refs/heads/} \
                                  -D SHORT_SHA=${{ steps.short-sha.outputs.SHORT_SHA }} \
                                  -D LONG_SHA=$GITHUB_SHA \
                                  -D IS_CI=1 \
                                  ./${{ env.PROJECT_NAME }}.kicad_pcb   
          
          kicad-cli sch export netlist -o "outputs/netlist/${{ env.PROJECT_NAME }}.kicadsexpr.net" --format kicadsexpr ./${{ env.PROJECT_NAME }}.kicad_sch

          kicad-cli sch export netlist -o "outputs/netlist/${{ env.PROJECT_NAME }}.kicadxml.net" --format kicadxml ./${{ env.PROJECT_NAME }}.kicad_sch

          kicad-cli sch export pdf -o "outputs/schematic/${{ env.PROJECT_NAME }}-schematic.pdf" -n ./${{ env.PROJECT_NAME }}.kicad_sch

          kicad-cli sch export bom -o "outputs/bom/${{ env.PROJECT_NAME }}-bom.csv" \
                                   --format-preset CSV \
                                   --fields "Reference,Value,Footprint,${QUANTITY},Notes,${DNP}" \
                                   --labels "Refs,Value,Footprint,Qty,Note,DNP" \
                                   --group-by "Reference,Value,Footprint,${DNP}" \
                                   ./${{ env.PROJECT_NAME }}.kicad_sch

      - name: Process Images
        shell: bash
        run: |
          for svg in $(ls ./outputs/svg/*.svg); do
            inkscape --export-filename ./outputs/png/$(basename $svg .svg).png --export-dpi 960 $svg
          done

          # stack top images
          convert ./outputs/png/${{ env.PROJECT_NAME }}-F.Cu.png -alpha set -channel A -evaluate multiply 1.0 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-F.Mask.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-F.Paste.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-F.Fab.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-F.Silkscreen.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-Edge.Cuts.png -alpha set -channel A -evaluate multiply 1.0 +channel \
                  -background none -layers merge ./outputs/png/${{ env.PROJECT_NAME }}-top.png
          
          # stack bottom images
          convert ./outputs/png/${{ env.PROJECT_NAME }}-B.Cu.png -alpha set -channel A -evaluate multiply 1 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-B.Mask.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-B.Paste.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-B.Fab.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-B.Silkscreen.png -alpha set -channel A -evaluate multiply 0.8 +channel \
                  ./outputs/png/${{ env.PROJECT_NAME }}-Edge.Cuts-mirrored.png -alpha set -channel A -evaluate multiply 1.0 +channel \
                  -background none -layers merge ./outputs/png/${{ env.PROJECT_NAME }}-bottom.png

          inkscape --export-filename ./outputs/png/${{ env.PROJECT_NAME }}-schematic.png --export-dpi 384 ./outputs/schematic/${{ env.PROJECT_NAME }}-schematic.pdf

      - name: Upload Images to imgur
        id: upload-images
        uses: devicons/public-upload-to-imgur@v2.2.2
        with:
          path: |
            ./outputs/png/${{ env.PROJECT_NAME }}-top.png
            ./outputs/png/${{ env.PROJECT_NAME }}-bottom.png
            ./outputs/png/${{ env.PROJECT_NAME }}-schematic.png
          client_id: ${{secrets.IMGUR_CLIENT_ID}}

      - name: Upload Files (Gerber, Position, STEP, VRML, Netlist, Schematic)
        uses: actions/upload-artifact@master
        with:
          name: files-${{ steps.short-sha.outputs.SHORT_SHA }}
          path: |
            ./outputs/gerber
            ./outputs/pnp
            ./outputs/step
            ./outputs/vrml
            ./outputs/netlist
            ./outputs/schematic/${{ env.PROJECT_NAME }}-schematic.pdf
            ./outputs/svg
            ./outputs/png
            ./outputs/bom/${{ env.PROJECT_NAME }}-bom.csv

      - name: Zip and rename files
        run: |
          zip -r ./outputs/Grber-${{ steps.short-sha.outputs.SHORT_SHA }}.zip ./outputs/gerber
          zip -r ./outputs/PNP-${{ steps.short-sha.outputs.SHORT_SHA }}.zip ./outputs/pnp
          zip -r ./outputs/STEP-${{ steps.short-sha.outputs.SHORT_SHA }}.zip ./outputs/step
          zip -r ./outputs/VRML-${{ steps.short-sha.outputs.SHORT_SHA }}.zip ./outputs/vrml
          zip -r ./outputs/Netlist-${{ steps.short-sha.outputs.SHORT_SHA }}.zip ./outputs/netlist
          cp ./outputs/schematic/${{ env.PROJECT_NAME }}-schematic.pdf ./outputs/Schematic-${{ steps.short-sha.outputs.SHORT_SHA }}.pdf
          cp ./outputs/bom/${{ env.PROJECT_NAME }}-bom.csv ./outputs/BOM-${{ steps.short-sha.outputs.SHORT_SHA }}.csv
      
      - name: Create tag
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/ci-${{ steps.short-sha.outputs.LONG_SHA }}',
              sha: context.sha
            })

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: CI Build ${{ steps.short-sha.outputs.SHORT_SHA }}
          tag_name: ci-${{ steps.short-sha.outputs.LONG_SHA }}
          body: |
            ## CI Build ${{ steps.short-sha.outputs.SHORT_SHA }}

            This is an automated build from the CI pipeline.

            ### Images

            ![Top Layer](${{fromJSON(steps.upload-images.outputs.imgur_urls)[0]}})

            ![Bottom Layer](${{fromJSON(steps.upload-images.outputs.imgur_urls)[1]}})

            ![Schematic](${{fromJSON(steps.upload-images.outputs.imgur_urls)[2]}})
            
          draft: false
          prerelease: true
          files: |
            ./outputs/Grber-${{ steps.short-sha.outputs.SHORT_SHA }}.zip
            ./outputs/PNP-${{ steps.short-sha.outputs.SHORT_SHA }}.zip
            ./outputs/STEP-${{ steps.short-sha.outputs.SHORT_SHA }}.zip
            ./outputs/VRML-${{ steps.short-sha.outputs.SHORT_SHA }}.zip
            ./outputs/Netlist-${{ steps.short-sha.outputs.SHORT_SHA }}.zip
            ./outputs/Schematic-${{ steps.short-sha.outputs.SHORT_SHA }}.pdf
            ./outputs/BOM-${{ steps.short-sha.outputs.SHORT_SHA }}.csv

  generate-jlc-gerber:
    needs:
      - export-files
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@master
        with:
          python-version: "3.x"

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Checkout Repository
        uses: actions/checkout@master
      
      - name: Set short SHA
        id: short-sha
        run: echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Download Gerber Files
        uses: actions/download-artifact@master
        with:
          name: files-${{ steps.short-sha.outputs.SHORT_SHA }}
          path: files

      - name: Process Gerber for JLCPCB
        run: | 
          mkdir -p ./jlc-gerber
          python .github/workflows/FuckJLC/modify.py -i $(pwd)/files/gerber -o $(pwd)/jlc-gerber
      
      - name: Upload JLC Gerber Files
        uses: actions/upload-artifact@master
        with:
          name: jlc-gerber-${{ steps.short-sha.outputs.SHORT_SHA }}
          path: ./jlc-gerber
